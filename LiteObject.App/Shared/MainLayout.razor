@using Microsoft.AspNetCore.Http.Extensions
@inherits LayoutComponentBase
@inject NavigationManager MyNavigationManager
@implements IDisposable
@*<PageTitle>LiteObject.App</PageTitle>*@

<NavMenu OnNavLinkClick="@OnNavLinkClick" />
@if (showHeaderAndFooter)
{
    <header class="bg-teal py-5">
        <div class="container px-5">
            <div class="row gx-5 justify-content-center">
                <div class="col-lg-6">
                    <div class="text-center my-5">
                        <h1 class="display-5 fw-bolder text-white mb-2">A generic collection of software engineers</h1>
                        <p class="lead text-white-50 mb-4">

                            Quickly design and customize responsive mobile-first sites with Bootstrap, the world’s most popular front-end open source toolkit!
                        </p>
                        <div class="d-grid gap-3 d-sm-flex justify-content-sm-center">
                            <a class="btn btn-primary btn-lg px-4 me-sm-3" href="#features">Get Started</a>
                            <a class="btn btn-outline-light btn-lg px-4" href="#!">Learn More</a>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </header>
    @Body
    <footer class="py-5 bg-dark">
        <div class="container px-5"><p class="m-0 text-center text-white">Copyright © Your Website 2022</p></div>
    </footer>
}
else
{
    <main class="container">
        @Body
    </main>
}


@code {

    private bool showHeaderAndFooter = true;

    private void OnNavLinkClick(string link)
    {
        // Console.WriteLine($"Main Layout. NavMenu's NavLink \"{link}\" has been clicked");

        if (link.Equals("/"))
        {
            showHeaderAndFooter = true;
        }
        else
        {
            showHeaderAndFooter = false;
        }
    }

    protected override void OnInitialized()
    {
        // Subscribe to the event
        MyNavigationManager.LocationChanged += LocationChanged;
        base.OnInitialized();
    }

    private void LocationChanged(object sender, LocationChangedEventArgs e)
    {
        /*if (MyNavigationManager.BaseUri.Equals(e.Location))
        {
            showHeader = true;
        }
        else
        {
            showHeader = false;
        } */
    }

    void IDisposable.Dispose()
    {
        // Unsubscribe from the event when our component is disposed
        MyNavigationManager.LocationChanged -= LocationChanged;
    }
}